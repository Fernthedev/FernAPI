buildscript {
    ext.kotlin_version = '1.4.10'
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }

    }

    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:4.0.4"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id 'java' apply true
    id 'org.jetbrains.kotlin.jvm' version '1.4.10'
    id 'net.nemerosa.versioning' version '2.14.0'
    id "io.freefair.lombok" version "5.2.1"
    id 'signing'
    id 'maven-publish'
}
//
apply plugin: 'java'
apply plugin: 'kotlin'
//apply plugin: 'maven'
//apply plugin: 'com.github.johnrengelman.shadow'
//apply plugin: 'maven-publish'

archivesBaseName = "FernAPI"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}


allprojects {
    apply plugin: 'java'
//    apply plugin: 'maven'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'net.nemerosa.versioning'
    apply plugin: 'io.freefair.lombok'

    group = 'com.github.Fernthedev'
//    version = versioning.info.full
    ext.buildVer = "1.9.0"
    ext.aikarVer = "0.5.0-SNAPSHOT"
    ext.adventureAPI = "4.5.1"
    ext.adventureAPIPlatform = "4.0.0-SNAPSHOT"
    ext.slf4j_ver = "1.7.30"
    project.ext.beta_version = '4' // Only modify when beta
    ext.beta_prefix = 'rc'
    description = 'An API for universal code'

    versioning {
        /**
         * Defines the SCM to use in order to collect information.
         *
         * At the moment, only Git (git) and Subversion (svn) are supported.
         */
        scm = 'git'

        /**
         * Fetch branch name from environment variables. Useful when using CI like
         * Travis or Jenkins.
         */
        branchEnv = ['TRAVIS_BRANCH', 'GIT_BRANCH', 'SVN_BRANCH', 'BRANCH_NAME']
        /**
         * Computation of the full version
         */
        full = {
            scmInfo ->

                GString suffix = "${scmInfo.branch}"

                if (suffix == 'beta') suffix += "${project.beta_version}"

                GString num = scmInfo.tag != null ? "${scmInfo.tag}" : "${scmInfo.abbreviated}.h-${suffix}"

                return "${num}"

        }

        releaseMode = 'snapshot'
        snapshot = '-beta'
//        displayMode = 'snapshot'

        /**
         * Dirty mode.
         *
         * Closure that takes a version (display or full) and processes it to produce a <i>dirty</i>
         * indicator. By default, it appends the dirtySuffix value to the version.
         */
        dirty = { version -> "${version}" }

        /**
         * Default dirty suffix
         */
        dirtySuffix = ''

        /**
         * If set to true, the build will fail if working copy is dirty and if the branch type is
         * part of the releases list ("release" only by default).
         */
        dirtyFailOnReleases = false

        /**
         * If set to true, no warning will be printed in case the workspace is dirty. Default is
         * to print a warning.
         */
        noWarningOnDirty = false

        /**
         * Set of eligible branch types for computing a display version from the branch base name
         */
        releases = ['release', 'stable']
        /**
         * Pattern used to match when looking for the last tag. By default, checks for any
         * tag having a last part being numeric. At least one numeric grouping
         * expression is required. The first one will be used to reverse order
         * the tags in Git.
         */
        lastTagPattern = /(\d+)$/
    }


    GString tagVer = "${buildVer}${beta_prefix}${project.beta_version}"
    // If being worked on
    version = versioning.info.tag != null ? versioning.info.tag : "v${tagVer}-${versioning.info.branch}-${versioning.info.build}"


    processResources {
//        from 'resources'

        inputs.property "fernapi_version", project.version

        from(sourceSets.main.resources.srcDirs) {
            include 'fernapi_version.json'


            expand 'fernapi_version': project.version
        }

    }

    repositories {
        flatDir {
            dirs 'libs'
        }

        maven { url = "https://repo.aikar.co/content/groups/aikar/" }

        maven {
            url "https://libraries.minecraft.net"
        }

        jcenter()
        maven { url "https://jitpack.io" }
        mavenCentral()
        maven {
            name = 'sonatype-oss'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        mavenLocal()
    }


    dependencies {
        implementation fileTree(include: ['*.jar'], dir: 'libs')

        api "net.kyori:adventure-api:$adventureAPI"
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

        compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1u2'

//        compileOnly 'org.projectlombok:lombok:1.18.12'
//        annotationProcessor 'org.projectlombok:lombok:1.18.12'
    }

    sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

    compileJava {
        sourceCompatibility = targetCompatibility = '1.8'
        options.compilerArgs += ["-parameters"]
        options.fork = true
        options.forkOptions.executable = 'javac'
    }

    compileKotlin {
        kotlinOptions.javaParameters = true
    }

    shadowJar {
        minimize()
        relocate 'co.aikar.commands', "${project.group}.acf"
        relocate 'co.aikar.locales', "${project.group}.locales"
        relocate 'co.aikar.idb', "${project.group}.idb"
    }

    compileJava.options.encoding = 'UTF-8'

//    task sourcesJar(type: Jar, dependsOn: classes) {
//        from sourceSets.main.java
//    }
//    task javadocJar(type: Jar, dependsOn: javadoc) {
//        from javadoc.destinationDir
//    }
//
//    artifacts {
//        archives javadocJar
//        archives sourcesJar
//    }

    java {
//        withJavadocJar()
        withSourcesJar()
    }

    javadoc {
        failOnError = false
    }


//    build.dependsOn sourcesJar

    afterEvaluate {
        publishing {
            publications  {
                mavenJava(MavenPublication) {
                    from components.java
                    groupId = "$rootProject.group.$rootProject.name"

                    artifactId = "$project.name"

                    print("Publishing version ${project.version}")
                    java {
                        withJavadocJar()
                        withSourcesJar()
                    }

//                    artifact sourcesJar {
//                        classifier("sources")
//                    }
//
//                    artifact javadocJar {
//                        classifier "javadoc"
//                    }

                }
            }
        }
    }




    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
        failOnError = false
    }

    configurations {
        shade
        compile.extendsFrom shade
    }


    jar.dependsOn(shadowJar)



    sourceSets {
        main.java.srcDirs = ['src/main/java', 'src/main/kotlin']
        main.kotlin.srcDirs = ['src/main/java', 'src/main/kotlin']
        main.resources.srcDirs = ['src/main/resources']
    }

//    shadowJar.finalizedBy javadocJar
//    shadowJar.finalizedBy sourcesJar
}

configure(subprojects.findAll {it.name != 'core'}) {
    afterEvaluate {
        dependencies {
            compile(project(':core'))
        }
    }
}

configure(subprojects.findAll {it.name != 'all'}) {
    afterEvaluate {
        dependencies {
            def platform = project.name;

            if (platform == "spigot") platform = "paper" // (Recommended over Spigot, will gradually enhance when ran on Paper, but still runs on Spigot)

            api "co.aikar:acf-${platform}:${project.aikarVer}" // Replace PLATFORM with bukkit, paper, sponge, etc
//            api "co.aikar:acf-core:${project.aikarVer}" // Replace PLATFORM with bukkit, paper, sponge, etc
        }
    }
}


repositories {
    mavenCentral()
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

//
//repositories {
//    maven {
//        name = 'spigotmc-repo'
//        url = 'https://hub.spigotmc.org/nexus/content/groups/public/'
//    }
//
//    maven {
//        name = 'sonatype'
//        url = 'https://oss.sonatype.org/content/groups/public/'
//    }
//
//
//    maven {
//        name = 'placeholderapi'
//        url = 'http://repo.extendedclip.com/content/repositories/placeholderapi/'
//    }
//
//    maven {
//        name 'velocity'
//        url 'https://repo.velocitypowered.com/snapshots/'
//    }
//
//    flatDir {
//        dirs 'libs'
//    }
//
//    jcenter()
//    maven { url "https://jitpack.io" }
//    mavenCentral()
//}







//
//dependencies {
//    implementation fileTree(include: ['*.jar'], dir: 'libs')
//    compileOnly 'com.google.code.gson:gson:2.6.2'
//    //compileOnly 'org.spigotmc:spigot-api:1.8-R0.1-SNAPSHOT'
//    compileOnly 'org.spigotmc:spigot-api:1.14.4-R0.1-SNAPSHOT' // The Spigot API with no shadowing. Requires the OSS repo.
//    compileOnly 'net.md-5:bungeecord-api:1.14-SNAPSHOT'
//    compileOnly group: 'me.clip', name: 'placeholderapi', version: '2.9.2'
//    compileOnly 'org.spongepowered:spongeapi:7.1.0'
//    compileOnly 'com.velocitypowered:velocity-api:1.1.0-SNAPSHOT'
//    annotationProcessor 'com.velocitypowered:velocity-api:1.1.0-SNAPSHOT'
////    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.17'
//    compile 'org.mariadb.jdbc:mariadb-java-client:2.1.2'
//    compile 'com.github.Fernthedev:fern-configmanager:1.1.2' // Check github releases tag for the version.
//
//    compileOnly ('com.github.Fernthedev:VaultAPI:7.0') {
//        exclude group: 'org.bukkit'
//    }
//    // 2. Use Guava types in your public API:
//    compile("com.google.guava:guava:28.1-jre")
////
//    compileOnly 'org.projectlombok:lombok:1.18.8'
//    annotationProcessor 'org.projectlombok:lombok:1.18.8'
//
//
////    implementation 'com.google.guava:guava:22.0'
//}



